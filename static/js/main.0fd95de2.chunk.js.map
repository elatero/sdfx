{"version":3,"sources":["features/ability/components/AbilityItem/Ability.module.scss","features/main/pages/Main.module.scss","assets/img/spinner.gif","features/single/components/CardHero/CardHero.module.scss","features/single/pages/Single.module.scss","features/ability/pages/Ability.module.scss","components/MainLayout/MainLayout.module.scss","features/main/actionTypes.ts","features/main/actions/fetchCardList.ts","features/main/actions/featchAbilityHero.ts","features/main/selectors.ts","features/main/pages/container.tsx","features/main/pages/Main.tsx","utils/compareName.ts","features/main/reducer.ts","features/single/actionTypes.ts","features/single/actions/featchDetailesAbility.ts","features/single/components/CardHero/CardHero.tsx","features/single/selectors.ts","features/single/pages/container.ts","features/single/pages/Single.tsx","features/single/reducer.ts","features/ability/components/AbilityItem/AbilityItem.tsx","features/ability/selectors.ts","features/ability/pages/container.ts","features/ability/pages/Ability.tsx","features/ability/reducer.ts","features/index.ts","components/MainLayout/MainLayout.tsx","components/Router/Router.tsx","store/createRootReducer.ts","store/configureStore.ts","components/App/App.tsx","components/App/index.ts","serviceWorker.ts","index.tsx"],"names":["module","exports","FETCH_CARD_LIST","FETCH_ABILITI_HERO","fetchCardList","dispatch","a","type","t","meta","done","axios","method","url","data","Error","results","payload","list","error","fetchAbilityHero","api","about","listSelector","createSelector","state","main","listItem","loaderSelector","loading","loader","mapStateToProps","createStructuredSelector","selectors","mapDispatchToProps","actions","connector","connect","props","history","useHistory","useEffect","className","styles","container","spinner","src","alt","img","map","item","index","key","card","onClick","slice","replace","push","name","compareName","b","handleActions","action","produce","draft","sort","FETCH_INFO_ABILITY","fetchDetailedAbilityHero","ability","CardHero","aboutHero","colLeft","line","id","base_experience","height","weight","colRight","box","types","abilityBox","abilities","boxBtn","btn","aboutHeroSelector","single","content","tm","AbilityItem","abilityDetailed","abilityItem","title","effect_entries","effect","goBack","abilityDetailedSelector","ts","MainLayout","pathname","useLocation","children","console","log","wrapper","header","logo","footer","Router","path","exact","component","features","pages","Main","Single","Ability","to","createRootReducer","combineReducers","reducer","persistConfig","storage","whitelist","preloadedState","middlewares","thunkMiddleware","enchancers","applyMiddleware","composedEnchancers","composeWithDevTools","persistedReducer","persistReducer","store","createStore","persistor","persistStore","configureStore","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.0fd95de2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"abilityItem\":\"Ability_abilityItem__kKSf0\",\"title\":\"Ability_title__2seIt\",\"content\":\"Ability_content__1gAS1\",\"list\":\"Ability_list__1qlhl\",\"item\":\"Ability_item__2tuv_\",\"boxBtn\":\"Ability_boxBtn__Z7tTB\",\"btn\":\"Ability_btn__2kNPN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Main_container__3ooBF\",\"spinner\":\"Main_spinner__3qerF\",\"img\":\"Main_img__39C2t\",\"list\":\"Main_list__3hT_B\",\"card\":\"Main_card__2wC0C\",\"name\":\"Main_name__namfs\"};","module.exports = __webpack_public_path__ + \"static/media/spinner.d452daac.gif\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"CardHero_card__3_4XQ\",\"colLeft\":\"CardHero_colLeft__3Ugwl\",\"img\":\"CardHero_img__13SBT\",\"name\":\"CardHero_name__3yD2b\",\"line\":\"CardHero_line__3VMjM\",\"about\":\"CardHero_about__2cmzP\",\"colRight\":\"CardHero_colRight__3D4rg\",\"box\":\"CardHero_box__3fx-j\",\"type\":\"CardHero_type__1f4P7\",\"abilityBox\":\"CardHero_abilityBox__AJbDa\",\"ability\":\"CardHero_ability__AZZ7m\",\"list\":\"CardHero_list__WpuuL\",\"listItem\":\"CardHero_listItem__3Xntc\",\"boxBtn\":\"CardHero_boxBtn__3CKtY\",\"btn\":\"CardHero_btn__2xa3q\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Single_container__3-zJ7\",\"spinner\":\"Single_spinner__3ZUuu\",\"img\":\"Single_img__1Ywz0\",\"content\":\"Single_content__1_csy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Ability_container__3wuZ0\",\"spinner\":\"Ability_spinner__3ApIa\",\"img\":\"Ability_img__32EY8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"MainLayout_wrapper__2fNK0\",\"header\":\"MainLayout_header__2JC5F\",\"container\":\"MainLayout_container__2xWzi\",\"logo\":\"MainLayout_logo__39949\",\"title\":\"MainLayout_title__25hkL\",\"main\":\"MainLayout_main__v_Dp8\",\"footer\":\"MainLayout_footer__puznE\"};","export const FETCH_CARD_LIST = 'FETCH_CARD_LIST'\nexport const FETCH_ABILITI_HERO = 'FFETCH_ABILITI_HERO'\n","import * as t from '../actionTypes'\nimport axios, { AxiosResponse } from 'axios'\n\nconst API = 'https://pokeapi.co/api/v2'\n\ntype Response = {\n  count: number //count card\n  next: string // API request list\n  results: {\n    name: string //name hero\n    url: string //Api request hero\n  }[]\n}\n\ntype Payload = {\n  list: {\n    name: string\n    url: string\n  }[]\n}\n\nexport type FeatchCardListAction = FSA<undefined, Payload, string>\ntype FetchCardList = () => MrxThunk<FeatchCardListAction>\n\nexport const fetchCardList: FetchCardList = () => async (dispatch) => {\n  dispatch({\n    type: t.FETCH_CARD_LIST,\n    meta: { done: false },\n  })\n\n  try {\n    const { data }: AxiosResponse<Response> = await axios({\n      method: 'GET',\n      url: `${API}/pokemon?limit=0&offset=20`,\n    })\n\n    if (!data) {\n      throw new Error('Response body is empty!')\n    }\n\n    const { results } = data\n\n    if (!results) {\n      throw new Error(\"Can't get card list items!\")\n    }\n\n    dispatch({\n      type: t.FETCH_CARD_LIST,\n      payload: {\n        list: [...results],\n      },\n      meta: { done: true },\n    })\n  } catch (error) {\n    dispatch({\n      type: t.FETCH_CARD_LIST,\n      payload: error,\n      error: true,\n    })\n  }\n}\n","import * as t from '../actionTypes'\nimport axios, { AxiosResponse } from 'axios'\n\ntype Response = {\n  abilities: []\n  base_experience: 157\n  forms: []\n  game_indices: []\n  height: number\n  held_items: []\n  id: number\n  is_default: boolean\n  location_area_encounters: string\n  moves: []\n  name: string\n  order: number\n  species: {}\n  sprites: {}\n  stats: []\n  types: []\n  weight: 650\n}\n\ntype Payload = {\n  about: {}\n}\n\nexport type FeatchAbilityHeroAction = FSA<undefined, Payload, string>\ntype FetchAbilityHero = (api: string) => MrxThunk<FeatchAbilityHeroAction>\n\nexport const fetchAbilityHero: FetchAbilityHero = (api) => async (dispatch) => {\n  dispatch({\n    type: t.FETCH_ABILITI_HERO,\n    meta: { done: false },\n  })\n\n  try {\n    const { data }: AxiosResponse<Response> = await axios({\n      method: 'GET',\n      url: `${api}`,\n    })\n\n    if (!data) {\n      throw new Error('Response body is empty!')\n    }\n\n    dispatch({\n      type: t.FETCH_ABILITI_HERO,\n      payload: {\n        about: { ...data },\n      },\n      meta: { done: true },\n    })\n  } catch (error) {\n    dispatch({\n      type: t.FETCH_ABILITI_HERO,\n      payload: error,\n      error: true,\n    })\n  }\n}\n","import { createSelector } from 'reselect'\nimport { ReduxState } from 'store/createRootReducer'\nimport { ListItem } from './types'\n\ntype ListSelector = (state: ReduxState) => ListItem[]\ntype LoaderSelector = (state: ReduxState) => boolean\n\nconst getListSelector: ListSelector = (state) => state.main.list\nconst getLoaderSelector: LoaderSelector = (state) => state.main.loading\n\nexport const listSelector = createSelector(getListSelector, (listItem) => listItem)\n\nexport const loaderSelector = createSelector(getLoaderSelector, (loader) => loader)\n","import { connect, ConnectedProps } from 'react-redux'\nimport { createStructuredSelector } from 'reselect'\nimport { ReduxState } from 'store/createRootReducer'\nimport * as actions from '../actions'\nimport * as selectors from '../selectors'\nimport { ListItem } from '../types'\n\ntype OwnProps = {\n  listItem: ListItem[]\n  loading: boolean\n}\n\nconst mapStateToProps = createStructuredSelector<ReduxState, OwnProps>({\n  listItem: selectors.listSelector,\n  loading: selectors.loaderSelector,\n})\n\nconst mapDispatchToProps = {\n  fetchCardList: actions.fetchCardList,\n  fetchAbilityHero: actions.fetchAbilityHero,\n}\n\nexport const connector = connect(mapStateToProps, mapDispatchToProps)\nexport type PropsFromRedux = ConnectedProps<typeof connector>\n","import React, { useEffect } from 'react'\nimport { connector, PropsFromRedux } from './container'\nimport { useHistory } from 'react-router'\n\nimport spinner from 'assets/img/spinner.gif'\nimport styles from './Main.module.scss'\n\nconst Main = (props: PropsFromRedux) => {\n  const { fetchCardList, fetchAbilityHero, listItem, loading } = props\n  const history = useHistory()\n\n  useEffect(() => {\n    fetchCardList()\n  }, [fetchCardList])\n\n  return (\n    <div className={styles.container}>\n      {loading ? (\n        <div className={styles.spinner}>\n          <img src={spinner} alt='loading' className={styles.img} />\n        </div>\n      ) : (\n        <div className={styles.list}>\n          {listItem.map((item, index) => {\n            return (\n              <div\n                key={index}\n                className={styles.card}\n                onClick={() => {\n                  fetchAbilityHero(item.url)\n                  const url = item.url.slice(34).replace(/\\//, '')\n                  history.push(`/pokemon/${url}`)\n                }}\n              >\n                <img src='https://via.placeholder.com/148x200' alt='card' />\n                <p className={styles.name}>{item.name}</p>\n              </div>\n            )\n          })}\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport default connector(Main)\n","import { ListItem } from 'features/main/types'\n\nexport const compareName = function (a: ListItem, b: ListItem) {\n  if (a.name > b.name) {\n    return 1\n  }\n  if (a.name < b.name) {\n    return -1\n  }\n\n  return 0\n}\n","import { handleActions } from 'redux-actions'\nimport { produce } from 'immer'\n\nimport * as t from './actionTypes'\nimport { MainState } from './types'\nimport { compareName } from 'utils'\n\nconst initState: MainState = {\n  list: [],\n  loading: true,\n}\n\nexport default handleActions(\n  {\n    [t.FETCH_CARD_LIST]: (state, action) =>\n      produce(state, (draft) => {\n        const { payload } = action\n        if (payload) {\n          draft.list = [...payload.list.sort(compareName)]\n          draft.loading = false\n        }\n      }),\n  },\n  initState\n)\n","export const FETCH_INFO_ABILITY = 'single/FETCH_INFO_ABILITY'\n","import * as t from '../actionTypes'\nimport axios, { AxiosResponse } from 'axios'\nimport { AboutAbility } from 'features/ability/types'\n\ntype Response = AboutAbility\n\ntype Payload = {\n  ability: {}\n}\n\nexport type FetchDetailedAbilityAction = FSA<undefined, Payload, string>\ntype FetchDetailedAbilityHero = (api: string) => MrxThunk<FetchDetailedAbilityAction>\n\nexport const fetchDetailedAbilityHero: FetchDetailedAbilityHero = (api) => async (dispatch) => {\n  dispatch({\n    type: t.FETCH_INFO_ABILITY,\n    meta: { done: false },\n  })\n\n  try {\n    const { data }: AxiosResponse<Response> = await axios({\n      method: 'GET',\n      url: `${api}`,\n    })\n\n    if (!data) {\n      throw new Error('Response body is empty!')\n    }\n\n    dispatch({\n      type: t.FETCH_INFO_ABILITY,\n      payload: {\n        ability: { ...data },\n      },\n      meta: { done: true },\n    })\n  } catch (error) {\n    dispatch({\n      type: t.FETCH_INFO_ABILITY,\n      payload: error,\n      error: true,\n    })\n  }\n}\n","import * as React from 'react'\nimport { useHistory } from 'react-router'\nimport { AboutHero } from '../../types'\n\nimport styles from './CardHero.module.scss'\n\ntype Props = {\n  aboutHero: AboutHero | null\n  fetchDetailedAbilityHero: (url: string) => void\n}\n\nconst CardHero = (props: Props) => {\n  const history = useHistory()\n  const { aboutHero, fetchDetailedAbilityHero } = props\n\n  return (\n    <div className={styles.card}>\n      <div className={styles.colLeft}>\n        <img src='https://via.placeholder.com/350x500' alt={`${aboutHero?.name}`} className={styles.img} />\n        <div className={styles.name}>{aboutHero?.name}</div>\n        <div className={styles.line}></div>\n        <div className={styles.about}>\n          <p>id: {aboutHero?.id}</p>\n          <p>Base_experience: {aboutHero?.base_experience}</p>\n          <p>Height: {aboutHero?.height}</p>\n          <p>Weight: {aboutHero?.weight}</p>\n        </div>\n      </div>\n      <div className={styles.colRight}>\n        <div className={styles.box}>\n          <h3 className={styles.type}>Type: {aboutHero?.types[0].type.name}</h3>\n          <div className={styles.abilityBox}>\n            <p className={styles.ability}>Abilities:</p>\n            <ul className={styles.list}>\n              {aboutHero?.abilities.map((ability, index) => {\n                return (\n                  <li\n                    key={index}\n                    className={styles.listItem}\n                    onClick={() => {\n                      fetchDetailedAbilityHero(ability.ability.url)\n                      const url = ability.ability.url.slice(34).replace(/\\//, '')\n                      history.push(`/ability/${url}`)\n                    }}\n                  >\n                    {ability.ability.name}\n                  </li>\n                )\n              })}\n            </ul>\n          </div>\n        </div>\n        <div className={styles.boxBtn}>\n          <button onClick={() => history.push('/')} className={styles.btn}>\n            Back\n          </button>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default CardHero\n","import { createSelector } from 'reselect'\nimport { ReduxState } from 'store/createRootReducer'\nimport { AboutHero } from './types'\n\ntype AboutHeroSelector = (state: ReduxState) => AboutHero | null\ntype LoaderSelector = (state: ReduxState) => boolean\n\nconst getAboutHeroSelector: AboutHeroSelector = (state) => state.single.about\nconst getLoaderSelector: LoaderSelector = (state) => state.single.loading\n\nexport const aboutHeroSelector = createSelector(getAboutHeroSelector, (listItem) => listItem)\nexport const loaderSelector = createSelector(getLoaderSelector, (loader) => loader)\n","import { connect, ConnectedProps } from 'react-redux'\nimport { createStructuredSelector } from 'reselect'\nimport { ReduxState } from 'store/createRootReducer'\nimport * as actions from '../actions'\nimport * as selectors from '../selectors'\nimport { AboutHero } from '../types'\n\ntype OwnProps = {\n  aboutHero: AboutHero | null\n  loading: boolean\n}\n\nconst mapStateToProps = createStructuredSelector<ReduxState, OwnProps>({\n  aboutHero: selectors.aboutHeroSelector,\n  loading: selectors.loaderSelector,\n})\n\nconst mapDispatchToProps = {\n  fetchDetailedAbilityHero: actions.fetchDetailedAbilityHero,\n}\n\nexport const connector = connect(mapStateToProps, mapDispatchToProps)\nexport type PropsFromRedux = ConnectedProps<typeof connector>\n","import React from 'react'\nimport { connector, PropsFromRedux } from './container'\n\nimport styles from './Single.module.scss'\nimport spinner from 'assets/img/spinner.gif'\nimport { CardHero } from '../components'\n\nconst Single = (props: PropsFromRedux) => {\n  const { aboutHero, loading, fetchDetailedAbilityHero } = props\n\n  return (\n    <div className={styles.container}>\n      {loading ? (\n        <div className={styles.spinner}>\n          <img src={spinner} alt='loading' className={styles.img} />\n        </div>\n      ) : (\n        <div className={styles.content}>\n          <CardHero aboutHero={aboutHero} fetchDetailedAbilityHero={fetchDetailedAbilityHero} />\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport default connector(Single)\n","import { handleActions } from 'redux-actions'\nimport { produce } from 'immer'\nimport * as tm from '../main/actionTypes'\nimport { SingleState } from './types'\n\nconst initState: SingleState = {\n  about: null,\n  loading: true,\n}\n\nexport default handleActions(\n  {\n    [tm.FETCH_ABILITI_HERO]: (state, action) =>\n      produce(state, (draft) => {\n        const { payload } = action\n        if (payload) {\n          draft.about = payload.about\n          draft.loading = false\n        }\n      }),\n  },\n  initState\n)\n","import React from 'react'\nimport { useHistory } from 'react-router'\n\nimport styles from './Ability.module.scss'\nimport { AboutAbility } from '../../types'\n\ntype Props = {\n  abilityDetailed: AboutAbility | null\n}\n\nconst AbilityItem = (props: Props) => {\n  const history = useHistory()\n  const { abilityDetailed } = props\n\n  return (\n    <div className={styles.abilityItem}>\n      <h1 className={styles.title}>Abilities Detailed</h1>\n      <div className={styles.content}>\n        <ul className={styles.list}>\n          {abilityDetailed?.effect_entries.map((item, index) => (\n            <li key={index} className={styles.item}>\n              {item.effect}\n            </li>\n          ))}\n        </ul>\n        <div className={styles.boxBtn}>\n          <button className={styles.btn} onClick={() => history.goBack()}>\n            back to hero\n          </button>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default AbilityItem\n","import { createSelector } from 'reselect'\nimport { ReduxState } from 'store/createRootReducer'\nimport { AboutAbility } from './types'\n\ntype AbilityDetailedSelector = (state: ReduxState) => AboutAbility | null\ntype LoaderSelector = (state: ReduxState) => boolean\n\nconst getAbilityDetailedSelector: AbilityDetailedSelector = (state) => state.ability.ability\nconst getLoaderSelector: LoaderSelector = (state) => state.single.loading\n\nexport const abilityDetailedSelector = createSelector(getAbilityDetailedSelector, (ability) => ability)\nexport const loaderSelector = createSelector(getLoaderSelector, (loader) => loader)\n","import { connect, ConnectedProps } from 'react-redux'\nimport { createStructuredSelector } from 'reselect'\nimport { ReduxState } from 'store/createRootReducer'\nimport * as selectors from '../selectors'\nimport { AboutAbility } from '../types'\n\ntype OwnProps = {\n  abilityDetailed: AboutAbility | null\n  loading: boolean\n}\n\nconst mapStateToProps = createStructuredSelector<ReduxState, OwnProps>({\n  abilityDetailed: selectors.abilityDetailedSelector,\n  loading: selectors.loaderSelector,\n})\n\nconst mapDispatchToProps = {}\n\nexport const connector = connect(mapStateToProps, mapDispatchToProps)\nexport type PropsFromRedux = ConnectedProps<typeof connector>\n","import React from 'react'\nimport { connector, PropsFromRedux } from './container'\n\nimport styles from './Ability.module.scss'\nimport spinner from 'assets/img/spinner.gif'\nimport AbilityItem from '../components/AbilityItem/AbilityItem'\n\nconst Ability = (props: PropsFromRedux) => {\n  const { loading, abilityDetailed } = props\n\n  return (\n    <div className={styles.container}>\n      {loading ? (\n        <div className={styles.spinner}>\n          <img src={spinner} alt='loading' className={styles.img} />\n        </div>\n      ) : (\n        <AbilityItem abilityDetailed={abilityDetailed} />\n      )}\n    </div>\n  )\n}\n\nexport default connector(Ability)\n","import { handleActions } from 'redux-actions'\nimport { produce } from 'immer'\nimport * as ts from 'features/single/actionTypes'\nimport { AbilityState } from './types'\n\nconst initState: AbilityState = {\n  ability: null,\n  loading: true,\n}\n\nexport default handleActions(\n  {\n    [ts.FETCH_INFO_ABILITY]: (state, action) =>\n      produce(state, (draft) => {\n        const { payload } = action\n        if (payload) {\n          draft.ability = payload.ability\n          draft.loading = false\n        }\n      }),\n  },\n  initState\n)\n","import * as main from './main'\nimport * as single from './single'\nimport * as ability from './ability'\n\nexport default {\n  main,\n  single,\n  ability,\n}\n","import React, { ReactNode } from 'react'\nimport { useHistory, useLocation } from 'react-router'\n\nimport styles from './MainLayout.module.scss'\n\ntype Props = {\n  children: ReactNode\n}\n\nconst MainLayout = (props: Props) => {\n  const history = useHistory()\n  const { pathname } = useLocation()\n  const { children } = props\n\n  const textHeader = () => {\n    if (pathname === '/') {\n      return 'List heros'\n    } else if (pathname.slice(1, 8) === 'pokemon') {\n      return 'About hero'\n    } else if (pathname.slice(1, 8) === 'ability') {\n      return 'List ability'\n    }\n  }\n\n  console.log(pathname.slice(1, 8))\n  return (\n    <div className={styles.wrapper}>\n      <header className={styles.header}>\n        <div className={styles.container}>\n          <div className={styles.logo}>\n            <p\n              onClick={() => {\n                history.push('/')\n              }}\n            >\n              Web<span>App</span>\n            </p>\n          </div>\n          <div className={styles.title}>{textHeader()}</div>\n        </div>\n      </header>\n      <main className={styles.main}>\n        <div className={styles.container}>{children}</div>\n      </main>\n      <footer className={styles.footer}>\n        <div className={styles.container}>Copyright © 2020</div>\n      </footer>\n    </div>\n  )\n}\n\nexport default MainLayout\n","import React from 'react'\nimport { Switch, Route, Redirect } from 'react-router-dom'\n\nimport features from 'features'\nimport { MainLayout } from 'components/MainLayout'\n\nexport const Router = () => {\n  return (\n    <MainLayout>\n      <Switch>\n        <Route path='/' exact component={features.main.pages.Main} />\n        <Route path='/pokemon/:id' component={features.single.pages.Single} />\n        <Route path='/ability/:id' component={features.ability.pages.Ability} />\n        <Redirect to='/' />\n      </Switch>\n    </MainLayout>\n  )\n}\n","import { combineReducers } from 'redux'\n\nimport features from 'features'\nimport { MainState } from 'features/main/types'\nimport { SingleState } from 'features/single/types'\nimport { AbilityState } from '../features/ability/types'\n\nexport type ReduxState = {\n  main: MainState\n  single: SingleState\n  ability: AbilityState\n}\n\nconst createRootReducer = combineReducers<ReduxState>({\n  main: features.main.reducer,\n  single: features.single.reducer,\n  ability: features.ability.reducer,\n})\n\nexport default createRootReducer\n","import { applyMiddleware, createStore, PreloadedState } from 'redux'\nimport thunkMiddleware from 'redux-thunk'\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport createRootReducer, { ReduxState } from './createRootReducer'\nimport { persistStore, persistReducer } from 'redux-persist'\nimport storage from 'redux-persist/lib/storage'\n\nconst persistConfig = {\n  key: 'root',\n  storage,\n  whitelist: ['single', 'ability'],\n}\n\nconst configureStore = (preloadedState?: PreloadedState<ReduxState>) => {\n  const middlewares = [thunkMiddleware]\n  const middlewareEnchancer = applyMiddleware(...middlewares)\n\n  const enchancers = [middlewareEnchancer] // Add any enchancers here\n  const composedEnchancers = composeWithDevTools(...enchancers)\n\n  const persistedReducer = persistReducer(persistConfig, createRootReducer)\n  const store = createStore(persistedReducer, preloadedState, composedEnchancers)\n\n  const persistor = persistStore(store)\n\n  return { store, persistor }\n}\n\nexport default configureStore\n","import React from 'react'\nimport { Provider } from 'react-redux'\nimport { BrowserRouter } from 'react-router-dom'\nimport { PersistGate } from 'redux-persist/integration/react'\n\nimport { Router } from '../Router'\nimport configureStore from 'store'\n\nconst { store, persistor } = configureStore()\n\nconst App = () => {\n  return (\n    <Provider store={store}>\n      <BrowserRouter>\n        <PersistGate persistor={persistor}>\n          <Router />\n        </PersistGate>\n      </BrowserRouter>\n    </Provider>\n  )\n}\n\nexport default App\n","import App from './App'\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from 'components/App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}